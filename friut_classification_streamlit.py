# -*- coding: utf-8 -*-
"""friut-classification-streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WfYTnhDTq_DnwJTroWHYtlBsXKEArVZT
"""

import streamlit as st
import tensorflow as tf
from tensorflow.keras.preprocessing.image import img_to_array, load_img
import numpy as np
from PIL import Image

# Define the labels
LABELS = ['turnip', 'carrot', 'paprika', 'raddish', 'beetroot', 'garlic',
          'ginger', 'apple', 'cauliflower', 'jalepeno', 'cucumber', 'potato',
          'capsicum', 'pineapple', 'eggplant', 'tomato', 'chilli pepper',
          'cabbage', 'banana', 'peas', 'lettuce', 'grapes', 'bell pepper',
          'corn', 'orange', 'watermelon', 'pear', 'pomegranate', 'onion',
          'sweetcorn', 'kiwi', 'soy beans', 'mango', 'spinach', 'lemon',
          'sweetpotato']

# Load the saved model
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("my_model.h5")

model = load_model()

# Function to preprocess the uploaded image
def preprocess_image(image):
    img = image.resize((224, 224))  # Adjust size to match model input
    img_array = img_to_array(img) / 255.0  # Normalize pixel values
    return np.expand_dims(img_array, axis=0)

# Streamlit App Interface
st.title("Image Classification App")
st.write("Upload an image to classify it into one of the following categories:")
st.write(", ".join(LABELS))

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # Preprocess and predict
    with st.spinner("Classifying..."):
        processed_image = preprocess_image(image)
        prediction = model.predict(processed_image)
        predicted_label = LABELS[np.argmax(prediction)]

    st.success(f"Prediction: {predicted_label}")
    st.write("Confidence Scores:")
    confidence_scores = {label: float(score) for label, score in zip(LABELS, prediction[0])}
    st.json(confidence_scores)